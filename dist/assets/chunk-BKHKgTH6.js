import{d as u,e as w,D as B,O as D}from"./index-ByFAet0J.js";import{E as m,V as E,D as $,N as p}from"./chunk-DZDJsQre.js";class b{static async generateBirthdayEventsForYears(e,t,a){return m.wrapOperation(async()=>{if(m.validateParams({teamMember:e,startYear:t,endYear:a},{teamMember:{required:!0,type:"object",custom:n=>n&&n.id&&n.name,customMessage:"Team member must have id and name fields"},startYear:{required:!0,type:"number",custom:n=>n>1900&&n<3e3,customMessage:"Start year must be a valid year"},endYear:{required:!0,type:"number",custom:n=>n>1900&&n<3e3,customMessage:"End year must be a valid year"}}),!e.birthday)return console.log(`Team member ${e.name} has no birthday date set`),[];if(t>a)throw new E("Start year must be less than or equal to end year","startYear",t);const s=new Date(e.birthday);if(isNaN(s.getTime()))throw new E(`Invalid birthday date for team member ${e.name}: ${e.birthday}`,"birthday",e.birthday);const d=[];for(let n=t;n<=a;n++)try{const i=await m.retryOperation(()=>u.getBirthdayEvents(),{maxRetries:2,baseDelay:500,operationName:`load birthday events for ${e.name}`,shouldRetry:(h,v)=>h instanceof E||h instanceof $&&v>1?!1:h instanceof p||h.message?.includes("network")||h.message?.includes("timeout")});if((Array.isArray(i)?i:[]).find(h=>{if(!h||typeof h!="object"||h.team_member_id!==e.id)return!1;try{return new Date(h.start_date).getFullYear()===n}catch(v){return console.warn("Error parsing event date:",h.start_date,v),!1}})){console.log(`Birthday event already exists for ${e.name} in ${n}`);continue}const y=new Date(n,s.getMonth(),s.getDate()),f=await m.retryOperation(()=>u.create({title:`🎂 ${e.name}'s Birthday`,description:`Birthday celebration for ${e.name}`,start_date:y.toISOString(),end_date:y.toISOString(),all_day:!0,location:null,event_type:"birthday",team_member_id:e.id,linked_entity_type:"team_member",linked_entity_id:e.id,recurrence:{type:"yearly",interval:1}}),{maxRetries:2,baseDelay:1e3,backoffMultiplier:1.5,operationName:`create birthday event for ${e.name} in ${n}`,shouldRetry:(h,v)=>h instanceof E||h.message?.includes("duplicate")||h.message?.includes("already exists")?!1:h instanceof p||h.message?.includes("network")||h.message?.includes("timeout")||h.message?.includes("server error"),onRetry:(h,v,l)=>{console.warn(`Retrying birthday event creation for ${e.name} in ${n}, attempt ${v}, delay ${l}ms`)}});d.push(f),console.log(`Created birthday event for ${e.name} in ${n}: ${f.id}`)}catch(i){const o=m.handleError(i,{operation:`create birthday event for ${e.name} in ${n}`,showToast:!1,context:{teamMemberId:e.id,year:n}});console.error(`Error creating birthday event for ${e.name} in ${n}:`,o)}return d},{operationName:"Birthday Event Generation",showLoading:!1,showSuccess:!1,successMessage:null,retryOptions:{maxRetries:0},errorOptions:{severity:m.SEVERITY.MEDIUM,context:{teamMemberId:e?.id,startYear:t,endYear:a}}})}static async updateBirthdayEventsForTeamMember(e,t){return m.wrapOperation(async()=>{m.validateParams({teamMemberId:e,newBirthdayDate:t},{teamMemberId:{required:!0,type:"string"},newBirthdayDate:{required:!0,type:"string"}});const r=new Date(t);if(isNaN(r.getTime()))throw new E(`Invalid birthday date: ${t}`,"newBirthdayDate",t);const s=await m.retryOperation(()=>w.get(e),{operationName:`load team member ${e}`,maxRetries:2,baseDelay:500,shouldRetry:(l,g)=>l instanceof $&&l.entityType==="TeamMember"?!1:l instanceof p||l.message?.includes("network")||l.message?.includes("timeout")});if(!s)throw new $(`Team member not found: ${e}`,"TeamMember",e);const d=await m.retryOperation(()=>u.getBirthdayEvents(),{operationName:"load birthday events",maxRetries:2,baseDelay:500,shouldRetry:(l,g)=>l instanceof E?!1:l instanceof p||l.message?.includes("network")||l.message?.includes("timeout")}),i=(Array.isArray(d)?d:[]).filter(l=>!l||typeof l!="object"?!1:l.team_member_id===e),o=new Date().getFullYear(),c=i.filter(l=>{if(!l||!l.start_date)return!1;try{const g=new Date(l.start_date).getFullYear();return!isNaN(g)&&g>=o}catch(g){return console.warn("Error parsing event date:",l.start_date,g),!1}}),y=[];for(const l of c)try{await m.retryOperation(()=>u.delete(l.id),{operationName:`delete birthday event ${l.id}`,maxRetries:2,baseDelay:500,shouldRetry:(g,O)=>g instanceof E||g instanceof $&&g.code==="NOT_FOUND"?!1:g instanceof p||g.message?.includes("network")||g.message?.includes("timeout")}),y.push({eventId:l.id,success:!0}),console.log(`Deleted existing birthday event ${l.id} for ${s.name}`)}catch(g){y.push({eventId:l.id,success:!1,error:g.message}),console.error(`Error deleting birthday event ${l.id}:`,g)}const f={...s,birthday:t},h=o+2,v=await this.generateBirthdayEventsForYears(f,o,h);return console.log(`Updated birthday events for ${s.name} with new date: ${t}`),{teamMember:f,deletedEvents:y.filter(l=>l.success).length,createdEvents:v.length,errors:y.filter(l=>!l.success)}},{operationName:"Update Birthday Events",showLoading:!0,showSuccess:!0,successMessage:"Updated birthday events for team member",retryOptions:{maxRetries:1},errorOptions:{severity:m.SEVERITY.MEDIUM,context:{teamMemberId:e,newBirthdayDate:t}}})}static async deleteBirthdayEventsForTeamMember(e){return m.wrapOperation(async()=>{m.validateParams({teamMemberId:e},{teamMemberId:{required:!0,type:"string"}});const r=(await m.retryOperation(()=>u.getBirthdayEvents(),{operationName:"load birthday events for deletion",maxRetries:2})).filter(o=>o.team_member_id===e);if(r.length===0)return console.log(`No birthday events found for team member ${e}`),{deletedCount:0,errorCount:0,errors:[]};const s=[];for(const o of r)try{await m.retryOperation(()=>u.delete(o.id),{operationName:`delete birthday event ${o.id}`,maxRetries:2,baseDelay:500,shouldRetry:(c,y)=>c instanceof E||c instanceof $&&c.code==="NOT_FOUND"?!1:c instanceof p||c.message?.includes("network")||c.message?.includes("timeout")}),s.push({eventId:o.id,success:!0}),console.log(`Deleted birthday event ${o.id} for team member ${e}`)}catch(c){const y=m.handleError(c,{operation:`delete birthday event ${o.id}`,showToast:!1,context:{eventId:o.id,teamMemberId:e}});s.push({eventId:o.id,success:!1,error:y.userMessage})}const d=s.filter(o=>o.success).length,n=s.filter(o=>!o.success).length,i=s.filter(o=>!o.success);return console.log(`Birthday event deletion completed for team member ${e}: ${d} successful, ${n} failed`),n>0&&console.warn("Some birthday events could not be deleted:",i),{deletedCount:d,errorCount:n,errors:i,totalEvents:r.length}},{operationName:"Delete Birthday Events",showLoading:!0,showSuccess:!0,successMessage:"Deleted birthday events for team member",retryOptions:{maxRetries:1},errorOptions:{severity:m.SEVERITY.MEDIUM,context:{teamMemberId:e}}})}static async ensureBirthdayEventsExist(e=null,t=null){return m.wrapOperation(async()=>{if(e||(e=await m.retryOperation(()=>w.list(),{operationName:"load team members for birthday sync",maxRetries:2,baseDelay:500,shouldRetry:(n,i)=>n instanceof E?!1:n instanceof p||n.message?.includes("network")||n.message?.includes("timeout")})),!t){const n=new Date().getFullYear();t=[n,n+1,n+2]}const r={timestamp:new Date().toISOString(),processedMembers:0,createdEvents:0,skippedMembers:0,errors:[],summary:{}},s=Array.isArray(e)?e:[],d=s.filter(n=>!n||typeof n!="object"?!1:n.birthday&&typeof n.birthday=="string");r.processedMembers=d.length,r.skippedMembers=s.length-d.length;for(const n of d)try{const i=Array.isArray(t)?t:[];for(const o of i){if(typeof o!="number"||isNaN(o)){console.warn("Invalid year in targetYears:",o);continue}const c=await this.generateBirthdayEventsForYears(n,o,o),y=Array.isArray(c)?c:[];r.createdEvents+=y.length}}catch(i){const o=m.handleError(i,{operation:`ensure birthday events for ${n.name}`,showToast:!1,context:{teamMemberId:n.id,targetYears:t}});r.errors.push({teamMemberId:n.id,teamMemberName:n.name,error:o.userMessage,category:o.category})}return r.summary={totalTeamMembers:e.length,membersWithBirthdays:d.length,membersWithoutBirthdays:r.skippedMembers,targetYears:t,eventsCreated:r.createdEvents,errorsEncountered:r.errors.length,successRate:r.processedMembers>0?((r.processedMembers-r.errors.length)/r.processedMembers*100).toFixed(1)+"%":"100%"},console.log("Birthday event synchronization completed:",r.summary),r},{operationName:"Ensure Birthday Events Exist",showLoading:!1,showSuccess:!1,retryOptions:{maxRetries:1},errorOptions:{severity:m.SEVERITY.MEDIUM,context:{targetYears:t,teamMemberCount:e?.length}}})}static async getBirthdayEventsForTeamMember(e){try{if(!e)throw new Error("Team member ID is required");return(await u.getBirthdayEvents()).filter(a=>a.team_member_id===e)}catch(t){throw console.error("Error getting birthday events for team member:",t),new Error(`Failed to get birthday events for team member: ${t.message}`)}}static async removeDuplicateBirthdayEvents(){try{const e=await u.getBirthdayEvents(),t={};for(const r of e){const s=new Date(r.start_date).getFullYear(),d=`${r.team_member_id}-${s}`;t[d]||(t[d]=[]),t[d].push(r)}const a={timestamp:new Date().toISOString(),duplicatesFound:0,duplicatesRemoved:0,errors:[]};for(const[r,s]of Object.entries(t))if(s.length>1){a.duplicatesFound+=s.length-1;const d=s.slice(1);for(const n of d)try{await u.delete(n.id),a.duplicatesRemoved++,console.log(`Removed duplicate birthday event ${n.id} for ${r}`)}catch(i){a.errors.push({eventId:n.id,key:r,error:i.message}),console.error(`Error removing duplicate birthday event ${n.id}:`,i)}}return console.log("Duplicate birthday event removal completed:",{duplicatesFound:a.duplicatesFound,duplicatesRemoved:a.duplicatesRemoved,errors:a.errors.length}),a}catch(e){throw console.error("Error removing duplicate birthday events:",e),new Error(`Failed to remove duplicate birthday events: ${e.message}`)}}}class F{static async generateBirthdayEvents(e=null,t=new Date().getFullYear()){try{if(e||(e=await w.list()),!Array.isArray(e))return console.warn("TeamMember.list() returned non-array:",e),[];const a=[];for(const r of e)if(!(!r||typeof r!="object")&&r.birthday)try{const s=new Date(r.birthday);if(isNaN(s.getTime())){console.warn(`Invalid birthday date for team member ${r.name}: ${r.birthday}`);continue}const d=new Date(t,s.getMonth(),s.getDate()),n=await u.getBirthdayEvents();if((Array.isArray(n)?n:[]).find(y=>{if(!y||typeof y!="object"||y.team_member_id!==r.id)return!1;try{return new Date(y.start_date).getFullYear()===t}catch(f){return console.warn("Error parsing event date:",y.start_date,f),!1}})){console.log(`Birthday event already exists for ${r.name} in ${t}`);continue}const c=await u.create({title:`🎂 ${r.name}'s Birthday`,description:`Birthday celebration for ${r.name}`,start_date:d.toISOString(),end_date:d.toISOString(),all_day:!0,location:null,event_type:"birthday",team_member_id:r.id,linked_entity_type:"team_member",linked_entity_id:r.id,recurrence:{type:"yearly",interval:1}});a.push(c),console.log(`Created birthday event for ${r.name}: ${c.id}`)}catch(s){console.error(`Error creating birthday event for ${r.name}:`,s)}return a}catch(a){throw console.error("Error generating birthday events:",a),new Error(`Failed to generate birthday events: ${a.message}`)}}static async convertDutyToCalendarEvent(e,t=!1){try{if(!e)throw new Error("Duty object is required");if(!e.id||!e.team_member_id||!e.title||!e.start_date||!e.end_date)throw new Error("Duty object missing required fields: id, team_member_id, title, start_date, end_date");const a=await w.get(e.team_member_id);if(!a)throw new Error(`Team member not found: ${e.team_member_id}`);if(!t){const n=await u.getByDutyId(e.id);if(n.length>0)return console.log(`Calendar event already exists for duty ${e.id}`),n[0]}const s={devops:"⚙️",on_call:"📞",other:"🛡️"}[e.type]||"🛡️",d=await u.createDutyEvent(e.id,e.team_member_id,`${s} ${e.title} - ${a.name}`,e.start_date,e.end_date,e.description||`${e.type} duty assignment for ${a.name}`);return console.log(`Created calendar event for duty ${e.title}: ${d.id}`),d}catch(a){throw console.error("Error converting duty to calendar event:",a),new Error(`Failed to convert duty to calendar event: ${a.message}`)}}static async convertOutOfOfficeToCalendarEvent(e,t=!1){try{if(!e)throw new Error("OutOfOffice object is required");if(!e.id||!e.team_member_id||!e.start_date||!e.end_date)throw new Error("OutOfOffice object missing required fields: id, team_member_id, start_date, end_date");const a=await w.get(e.team_member_id);if(!a)throw new Error(`Team member not found: ${e.team_member_id}`);if(!t){const s=await u.getByOutOfOfficeId(e.id);if(s.length>0)return console.log(`Calendar event already exists for out-of-office ${e.id}`),s[0]}e.type&&e.type.charAt(0).toUpperCase()+e.type.slice(1);const r=await u.createOutOfOfficeEvent(e.id,e.team_member_id,a.name,e.start_date,e.end_date,e.type||"other");return console.log(`Created calendar event for out-of-office ${a.name}: ${r.id}`),r}catch(a){throw console.error("Error converting out-of-office to calendar event:",a),new Error(`Failed to convert out-of-office to calendar event: ${a.message}`)}}static async generateDutyEvents(e=null){try{if(e||(e=await B.list()),!Array.isArray(e))return console.warn("Duty.list() returned non-array:",e),[];const t=[];for(const a of e)if(!(!a||typeof a!="object"))try{const r=await this.convertDutyToCalendarEvent(a);t.push(r)}catch(r){console.error(`Error generating calendar event for duty ${a.id}:`,r)}return t}catch(t){throw console.error("Error generating duty events:",t),new Error(`Failed to generate duty events: ${t.message}`)}}static async generateOutOfOfficeEvents(e=null){try{if(e||(e=await D.list()),!Array.isArray(e))return console.warn("OutOfOffice.list() returned non-array:",e),[];const t=[];for(const a of e)if(!(!a||typeof a!="object"))try{const r=await this.convertOutOfOfficeToCalendarEvent(a);t.push(r)}catch(r){console.error(`Error generating calendar event for out-of-office ${a.id}:`,r)}return t}catch(t){throw console.error("Error generating out-of-office events:",t),new Error(`Failed to generate out-of-office events: ${t.message}`)}}static async synchronizeAllEvents(e={}){const{includeBirthdays:t=!0,includeDuties:a=!0,includeOutOfOffice:r=!0,birthdayYears:s=null,year:d=null}=e;return m.wrapOperation(async()=>{const i={timestamp:new Date().toISOString(),birthdayEvents:[],dutyEvents:[],outOfOfficeEvents:[],errors:[],summary:{totalCreated:0,totalErrors:0,success:!0}};if(t)try{const o=await m.retryOperation(()=>w.list(),{operationName:"load team members for birthday sync",maxRetries:2});let c=s;if(!c){const f=d||new Date().getFullYear();c=[f,f+1,f+2]}const y=await b.ensureBirthdayEventsExist(o,c);i.birthdayEvents=y.createdEvents||0,i.summary.totalCreated+=y.createdEvents||0,y.errors&&y.errors.length>0&&(i.errors.push(...y.errors.map(f=>({type:"birthday_generation",teamMemberId:f.teamMemberId,teamMemberName:f.teamMemberName,message:f.error,category:f.category}))),i.summary.totalErrors+=y.errors.length)}catch(o){const c=m.handleError(o,{operation:"birthday event generation",showToast:!1,context:{birthdayYears:s,year:d}});i.errors.push({type:"birthday_generation",message:c.userMessage,category:c.category}),i.summary.totalErrors++}if(a)try{const o=await m.retryOperation(()=>this.generateDutyEvents(),{operationName:"generate duty events",maxRetries:2,shouldRetry:c=>!c.message?.includes("validation")});i.dutyEvents=o,i.summary.totalCreated+=o.length}catch(o){const c=m.handleError(o,{operation:"duty event generation",showToast:!1,context:{year:d}});i.errors.push({type:"duty_generation",message:c.userMessage,category:c.category}),i.summary.totalErrors++}if(r)try{const o=await m.retryOperation(()=>this.generateOutOfOfficeEvents(),{operationName:"generate out-of-office events",maxRetries:2,shouldRetry:c=>!c.message?.includes("validation")});i.outOfOfficeEvents=o,i.summary.totalCreated+=o.length}catch(o){const c=m.handleError(o,{operation:"out-of-office event generation",showToast:!1,context:{year:d}});i.errors.push({type:"out_of_office_generation",message:c.userMessage,category:c.category}),i.summary.totalErrors++}return i.summary.success=i.summary.totalErrors===0,console.log("Calendar event synchronization completed:",{totalCreated:i.summary.totalCreated,totalErrors:i.summary.totalErrors,success:i.summary.success}),i},{operationName:"Synchronize Calendar Events",showLoading:!1,showSuccess:!1,retryOptions:{maxRetries:1},errorOptions:{severity:m.SEVERITY.MEDIUM,context:{includeBirthdays:t,includeDuties:a,includeOutOfOffice:r,year:d}}})}static async updateCalendarEventFromSource(e,t,a){try{let r=null;switch(e){case"duty":const s=await u.getByDutyId(t);s.length>0&&(await u.delete(s[0].id),r=await this.convertDutyToCalendarEvent(a,!0));break;case"out_of_office":const d=await u.getByOutOfOfficeId(t);d.length>0&&(await u.delete(d[0].id),r=await this.convertOutOfOfficeToCalendarEvent(a,!0));break;case"team_member":if(a.birthday){await b.updateBirthdayEventsForTeamMember(t,a.birthday);const n=await b.getBirthdayEventsForTeamMember(t);r=n.length>0?n[0]:null}break;default:throw new Error(`Unsupported source type: ${e}`)}return r}catch(r){throw console.error(`Error updating calendar event from ${e} source:`,r),new Error(`Failed to update calendar event from ${e}: ${r.message}`)}}static async handleTeamMemberCreation(e){try{if(!e)throw new Error("Team member object is required");if(!e.birthday)return console.log(`Team member ${e.name} has no birthday date, skipping birthday event generation`),[];const t=new Date().getFullYear(),a=await b.generateBirthdayEventsForYears(e,t,t+2);return console.log(`Generated ${a.length} birthday events for new team member ${e.name}`),a}catch(t){throw console.error("Error handling team member creation:",t),new Error(`Failed to handle team member creation: ${t.message}`)}}static async handleTeamMemberUpdate(e,t,a=null){try{if(!e)throw new Error("Team member ID is required");if(!t)throw new Error("Updated team member data is required");if(a&&a.birthday!==t.birthday||!a&&t.birthday)if(t.birthday){await b.updateBirthdayEventsForTeamMember(e,t.birthday);const s=await b.getBirthdayEventsForTeamMember(e);return console.log(`Updated ${s.length} birthday events for team member ${t.name}`),s}else return await b.deleteBirthdayEventsForTeamMember(e),console.log(`Deleted birthday events for team member ${t.name} (birthday removed)`),[];return[]}catch(r){throw console.error("Error handling team member update:",r),new Error(`Failed to handle team member update: ${r.message}`)}}static async handleTeamMemberDeletion(e){try{if(!e)throw new Error("Team member ID is required");return await this.deleteCalendarEventsForSource("team_member",e),console.log(`Cleaned up all calendar events for deleted team member ${e}`),!0}catch(t){throw console.error("Error handling team member deletion:",t),new Error(`Failed to handle team member deletion: ${t.message}`)}}static async deleteCalendarEventsForSource(e,t){try{let a=[];switch(e){case"duty":a=await u.getByDutyId(t);break;case"out_of_office":a=await u.getByOutOfOfficeId(t);break;case"team_member":await b.deleteBirthdayEventsForTeamMember(t),a=(await u.list()).filter(s=>s.team_member_id===t&&s.event_type!=="birthday");break;default:throw new Error(`Unsupported source type: ${e}`)}for(const r of a)try{await u.delete(r.id),console.log(`Deleted calendar event ${r.id} for ${e} ${t}`)}catch(s){console.error(`Error deleting calendar event ${r.id}:`,s)}return!0}catch(a){throw console.error(`Error deleting calendar events for ${e} source:`,a),new Error(`Failed to delete calendar events for ${e}: ${a.message}`)}}}export{F as C};
