import{H as d}from"./index-ByFAet0J.js";import{x as m,z as i,y,B as f}from"./chunk-CZDJnSNg.js";const l={ACTIVE:"active",COMPLETED:"completed",PAUSED:"paused"},u=m({employeeId:i().min(1,"Employee ID is required").describe("ID of the team member this goal belongs to"),title:i().min(1,"Goal title is required").max(200,"Goal title must be less than 200 characters").describe("Main goal title"),developmentNeed:i().min(1,"Development need is required").max(500,"Development need must be less than 500 characters").describe("Skills or areas needing improvement"),developmentActivity:i().min(1,"Development activity is required").max(500,"Development activity must be less than 500 characters").describe("Specific planned activities to achieve the goal"),developmentGoalDescription:i().min(1,"Goal description is required").max(1e3,"Goal description must be less than 1000 characters").describe("Detailed goal breakdown and expectations"),status:y([l.ACTIVE,l.COMPLETED,l.PAUSED]).optional().default(l.ACTIVE).describe("Current status of the goal"),importSource:i().optional().describe("Source system identifier if imported from external system")}),g=u.partial().extend({id:i().optional(),createdAt:i().optional(),updatedAt:i().optional()});u.extend({id:i().describe("Unique identifier for the goal"),createdAt:i().datetime().describe("ISO timestamp of goal creation"),updatedAt:i().datetime().describe("ISO timestamp of last modification")});m({goals:f(u).min(1,"At least one goal is required").max(100,"Cannot import more than 100 goals at once"),importSource:i().optional().describe("Source identifier for tracking imported data")});const w=m({searchText:i().optional().describe("Text to search in goal title and description"),status:y([l.ACTIVE,l.COMPLETED,l.PAUSED]).optional().describe("Filter by goal status"),employeeId:i().optional().describe("Filter by specific employee"),importSource:i().optional().describe("Filter by import source"),createdAfter:i().datetime().optional().describe("Filter goals created after this date"),createdBefore:i().datetime().optional().describe("Filter goals created before this date"),updatedAfter:i().datetime().optional().describe("Filter goals updated after this date"),updatedBefore:i().datetime().optional().describe("Filter goals updated before this date")}),v=c=>u.parse(c),E=c=>g.parse(c),G=c=>w.parse(c),h=c=>Object.values(l).includes(c);class S{static async getAllGoals(){try{return await d.entities.EmployeeGoal.list()}catch(t){throw console.error("Error fetching all goals:",t),t}}static async getGoalById(t){try{if(!t)throw new Error("Goal ID is required");return await d.entities.EmployeeGoal.get(t)}catch(e){throw console.error(`Error fetching goal ${t}:`,e),e}}static async getGoalsByEmployee(t){try{if(!t)throw new Error("Employee ID is required");return await d.entities.EmployeeGoal.getByTeamMember(t)}catch(e){throw console.error(`Error fetching goals for employee ${t}:`,e),e}}static async createGoal(t){try{if(!t.employeeId)throw new Error("employeeId is required");if(!t.title)throw new Error("title is required");const e=v(t);return await d.entities.EmployeeGoal.create(e)}catch(e){if(console.error("Error creating goal:",e),e.name==="ZodError"){const r=e.issues[0];if(r&&r.path.length>0)throw new Error(`${r.path[0]} is required`)}throw e}}static async updateGoal(t,e){try{if(!t)throw new Error("Goal ID is required");if(e.status&&!h(e.status))throw new Error("Invalid status value. Must be active, completed, or paused");const r=E(e);return await d.entities.EmployeeGoal.update(t,r)}catch(r){throw console.error(`Error updating goal ${t}:`,r),r}}static async deleteGoal(t){try{if(!t)throw new Error("Goal ID is required");return await d.entities.EmployeeGoal.delete(t)}catch(e){throw console.error(`Error deleting goal ${t}:`,e),e}}static async getGoalsByStatus(t){try{if(!h(t))throw new Error("Invalid status value. Must be active, completed, or paused");return(await this.getAllGoals()).filter(r=>r.status===t)}catch(e){throw console.error(`Error fetching goals by status ${t}:`,e),e}}static async searchGoals(t){try{if(!t||typeof t!="string")return[];const e=await this.getAllGoals(),r=t.toLowerCase();return e.filter(o=>{const s=o.title?.toLowerCase().includes(r),a=o.developmentGoalDescription?.toLowerCase().includes(r),n=o.developmentNeed?.toLowerCase().includes(r),p=o.developmentActivity?.toLowerCase().includes(r);return s||a||n||p})}catch(e){throw console.error(`Error searching goals with text "${t}":`,e),e}}static async bulkCreateGoals(t){try{if(!Array.isArray(t)||t.length===0)throw new Error("Goals data must be a non-empty array");const e={successful:[],failed:[]};for(let r=0;r<t.length;r++)try{const o=await this.createGoal(t[r]);e.successful.push(o)}catch(o){e.failed.push({data:t[r],error:o.message,index:r})}return e}catch(e){throw console.error("Error in bulk goal creation:",e),e}}static async getGoalsStatistics(){try{const t=await this.getAllGoals(),e={total:t.length,byStatus:{active:0,completed:0,paused:0},byEmployee:{}};return t.forEach(r=>{r.status&&e.byStatus.hasOwnProperty(r.status)&&e.byStatus[r.status]++,r.employeeId&&(e.byEmployee[r.employeeId]=(e.byEmployee[r.employeeId]||0)+1)}),e}catch(t){throw console.error("Error generating goal statistics:",t),t}}static async advancedSearch(t={}){try{const e=G(t);let r=await this.getAllGoals();if(e.searchText&&(r=await this.searchGoals(e.searchText)),e.status&&(r=r.filter(o=>o.status===e.status)),e.employeeId&&(r=r.filter(o=>o.employeeId===e.employeeId)),e.importSource&&(r=r.filter(o=>o.importSource===e.importSource)),e.createdAfter){const o=new Date(e.createdAfter);r=r.filter(s=>{try{return new Date(s.createdAt)>=o}catch{return!1}})}if(e.createdBefore){const o=new Date(e.createdBefore);r=r.filter(s=>{try{return new Date(s.createdAt)<=o}catch{return!1}})}if(e.updatedAfter){const o=new Date(e.updatedAfter);r=r.filter(s=>{try{return new Date(s.updatedAt)>=o}catch{return!1}})}if(e.updatedBefore){const o=new Date(e.updatedBefore);r=r.filter(s=>{try{return new Date(s.updatedAt)<=o}catch{return!1}})}return r}catch(e){throw console.error("Error in advanced search:",e),e}}static async completeGoal(t){try{return await this.updateGoal(t,{status:l.COMPLETED,completedAt:new Date().toISOString()})}catch(e){throw console.error(`Error completing goal ${t}:`,e),e}}static async pauseGoal(t){try{return await this.updateGoal(t,{status:l.PAUSED,pausedAt:new Date().toISOString()})}catch(e){throw console.error(`Error pausing goal ${t}:`,e),e}}static async reactivateGoal(t){try{return await this.updateGoal(t,{status:l.ACTIVE,reactivatedAt:new Date().toISOString()})}catch(e){throw console.error(`Error reactivating goal ${t}:`,e),e}}static async getGoalsForMeeting(t){try{const e=await this.getGoalsByEmployee(t),r=e.filter(a=>a.status==="active"),o={total:e.length,active:e.filter(a=>a.status==="active").length,completed:e.filter(a=>a.status==="completed").length,paused:e.filter(a=>a.status==="paused").length},s=r.map(a=>`${a.developmentNeed} development progress`).filter(a=>a&&a.trim()!==" development progress");return{activeGoals:r,goalsSummary:o,suggestedTopics:s}}catch(e){return console.error("Error getting goals for meeting:",e),{activeGoals:[],goalsSummary:{total:0,active:0,completed:0,paused:0},suggestedTopics:[],error:"Failed to load goals for meeting context"}}}static async suggestAgendaItems(t){try{return(await this.getGoalsByEmployee(t)).filter(o=>o.status==="active").map(o=>`Discuss progress on ${o.title} goal`)}catch(e){return console.error("Error suggesting agenda items:",e),[]}}static async findRelatedGoals(t){try{const e=await this.getAllGoals(),r=t.toLowerCase();return e.filter(o=>o.title.toLowerCase().includes(r)||o.developmentNeed.toLowerCase().includes(r)||o.developmentActivity.toLowerCase().includes(r)||o.developmentGoalDescription.toLowerCase().includes(r))}catch(e){return console.error("Error finding related goals:",e),[]}}static async suggestTasksFromGoals(t){try{const e=await this.getGoalsByEmployee(t),r=[];return e.forEach(o=>{o.developmentActivity&&o.developmentActivity.trim()&&o.developmentActivity.split(/\d+\.\s+/).filter(a=>a.trim()).map(a=>a.replace(/^\d+\.\s*/,"").trim()).forEach(a=>{a&&r.push(a)}),o.developmentGoalDescription&&o.developmentGoalDescription.trim()&&o.developmentGoalDescription.split(/\d+\.\s+/).filter(a=>a.trim()).map(a=>a.replace(/^\d+\.\s*/,"").trim()).forEach(a=>{a&&r.push(`${a.split(" ").slice(0,6).join(" ")} for ${o.title}`)})}),[...new Set(r)]}catch(e){return console.error("Error suggesting tasks from goals:",e),[]}}static async getGoalsAnalytics(){try{const t=await this.getAllGoals(),e={active:t.filter(a=>a.status==="active").length,completed:t.filter(a=>a.status==="completed").length,paused:t.filter(a=>a.status==="paused").length},r=t.length>0?e.completed/t.length:0,o={};t.forEach(a=>{const n=new Date(a.createdAt),p=`${n.getFullYear()}-${String(n.getMonth()+1).padStart(2,"0")}`;o[p]=(o[p]||0)+1});const s=Object.entries(o).map(([a,n])=>({month:a,count:n}));return{totalGoals:t.length,statusBreakdown:e,monthlyTrends:s,completionRate:Math.round(r*100)/100}}catch(t){throw console.error("Error getting goals analytics:",t),t}}static async getEmployeeGoalsProgress(){try{const t=await this.getAllGoals(),e={};return t.forEach(r=>{e[r.employeeId]||(e[r.employeeId]={total:0,completed:0,completionRate:0}),e[r.employeeId].total++,r.status==="completed"&&e[r.employeeId].completed++}),Object.keys(e).forEach(r=>{const o=e[r];o.completionRate=o.total>0?Math.round(o.completed/o.total*100)/100:0}),e}catch(t){throw console.error("Error getting employee goals progress:",t),t}}static async searchGoalsForGlobalResults(t){try{const e=await this.getAllGoals(),r=t.toLowerCase();return e.filter(s=>s.title.toLowerCase().includes(r)||s.developmentNeed.toLowerCase().includes(r)||s.developmentActivity.toLowerCase().includes(r)||s.developmentGoalDescription.toLowerCase().includes(r)).map(s=>{let a=0;return s.title.toLowerCase().includes(r)&&(a+=3),s.developmentNeed.toLowerCase().includes(r)&&(a+=2),s.developmentActivity.toLowerCase().includes(r)&&(a+=1),s.developmentGoalDescription.toLowerCase().includes(r)&&(a+=1),{type:"goal",id:s.id,title:s.title,description:`Development Need: ${s.developmentNeed}`,employeeId:s.employeeId,relevanceScore:a}}).sort((s,a)=>a.relevanceScore-s.relevanceScore)}catch(e){return console.error("Error searching goals for global results:",e),[]}}}export{S as E};
